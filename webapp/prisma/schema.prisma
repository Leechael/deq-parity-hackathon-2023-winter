// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  address       String?    @unique
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  createdAt     DateTime   @default(now()) @map("created_at")
  Pledge        Pledge[]
  questions     Question[]
  answers       Answer[]
  holdings      Holder[]
  trades        TradeLog[]
  Account       Account[]
  Session       Session[]

  @@map("users")
}

model Pledge {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  amount    BigInt
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("pledges")
}

model Question {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  title     String
  body      String
  createdAt DateTime @default(now()) @map("created_at")

  user    User     @relation(fields: [userId], references: [id])
  answers Answer[]

  @@map("questions")
}

model Answer {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  questionId String   @map("question_id")
  tokenId    Int      @unique @map("token_id")
  body       String
  createdAt  DateTime @default(now()) @map("created_at")

  user     User       @relation(fields: [userId], references: [id])
  question Question   @relation(fields: [questionId], references: [id])
  trades   TradeLog[]

  @@map("answers")
}

model Holder {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  tokenId   Int      @map("token_id")
  shares    BigInt
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("holders")
}

model TradeLog {
  id         String   @id @default(cuid())
  userId     String?  @map("user_id")
  tokenId    Int      @map("token_id")
  address    String
  amount     BigInt
  tokens     BigInt
  creatorFee BigInt   @map("creator_fee")
  createdAt  DateTime @default(now()) @map("created_at")

  user   User?  @relation(fields: [userId], references: [id])
  answer Answer @relation(fields: [tokenId], references: [tokenId])

  @@map("trade_logs")
}
